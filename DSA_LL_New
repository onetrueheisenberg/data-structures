class LLNode {
    constructor(value) {
        this.value = value;
        this.next = null;
    }
}

class LinkedList {
    constructor(value) {
        const newNode = new LLNode(value);
        this.head = newNode;
        this.tail = this.head;
        this.length = 1;

    }

    push(value) {
        const newNode = new LLNode(value);
        if ( !this.head ) {
            this.head = newNode;
            this.tail = this.head;
        } else {
            this.tail.next = newNode;
            this.tail = this.tail.next;
        }
        this.length++;
        return this;
    }

    pop() {
        if ( !this.head ) return undefined;
        let trackingNode = this.head;
        let pre = this.head;
        while ( trackingNode.next ) {
            pre = trackingNode;
            trackingNode = trackingNode.next;
        }
        this.tail = pre;
        this.tail.next = null;
        this.length--;
        if ( this.length === 0 ) {
            this.head = null;
            this.tail = null;
        }
        return trackingNode;
    }

    unshift(value) {
        const newNode = new LLNode(value);
        if ( !this.head ) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            newNode.next = this.head;
            this.head = newNode;
        }
        this.length++;
        return this;
    }

    shift() {
        if ( !this.head ) return undefined;
        let temp = this.head;
        this.head = this.head.next;
        temp.next = null;
        this.length--;
        if ( this.length === 0) {
            this.tail = null;
        }
        return temp;
    }

    get(index) {
        if ( index < 0 || index > this.length ) return undefined;
        let temp = this.head;
        let counter = 0;
        while (  counter < index ) {
            temp = temp.next;
            counter++;
        }
        return temp;
    }

    set(index, value) {
        let temp = this.get(index);
        if ( temp ) {
            temp.value = value;
            return true;
        }
        return false;
    }

    insert(index, value) {
        if ( index === 0 ) return this.unshift(value);
        if ( index === this.length ) return this.push(value);
        if ( index < 0 || index > this.length ) return false;
        const newNode = new LLNode(value);
        let temp = this.get(index - 1);
        newNode.next = temp.next;
        temp.next = newNode;
        this.length++;
        return true;
    }

    remove(index) {
        if ( index === 0 ) return this.shift();
        if ( index === this.length - 1 ) return this.pop();
        if ( index < 0 || index >= this.length ) return false;
        let tempPrev = this.get(index - 1);
        let temp = tempPrev.next;
        tempPrev.next = temp.next;
        temp.next = null;
        this.length--;
        return temp;
    }

    reverse() {
        let temp = this.head;
        this.head = this.tail;
        this.tail = temp;
        let next = temp.next;
        let prev = null;
        let counter = 0;
        while ( counter < this.length ) {
            next = temp.next;
            temp.next = prev;
            prev = temp;
            temp = next;
            counter++;
        }
        return this;
    }
}

function test() {
    let ll = new LinkedList(1);
    ll.push(10);
    ll.push(25);
    ll.push(12);
    ll.pop();
    ll.unshift(19);
    ll.shift();
    ll.get(2);
    ll.set(1,5);
    ll.insert(1,8);
    ll.remove(1);
    ll.reverse();
    console.log(ll);
}

test();