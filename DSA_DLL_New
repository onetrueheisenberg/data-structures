class DLLNode {
    constructor(value) {
        this.value = value;
        this.prev = null;
        this.next = null;
    }
}

class DoublyLinkedList {
    constructor(value) {
        const newNode = new DLLNode(value);
        this.head = newNode;
        this.tail = this.head;
        this.length = 1;

    }

    push(value) {
        const newNode = new DLLNode(value);
        if ( !this.head ) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.tail.next = newNode;
            newNode.prev = this.tail;
            this.tail = newNode;
        }
        this.length++;
        return this;
    }

    pop() {
        if ( !this.head ) return undefined;
        let temp = this.tail
        if ( this.length === 1 ) {
            this.head = null;
            this.tail = null;
        } else {
            this.tail = this.tail.prev;
            this.tail.next = null;
            temp.prev = null;
        }
        this.length--;
        return temp;
    }

    unshift(value) {
        const newNode = new DLLNode(value);
        if ( !this.head ) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            newNode.next = this.head;
            this.head.prev = newNode;
            this.head = newNode;
        }
        this.length++;
        return this;
    }

    shift() {
        if ( !this.head ) return undefined;
        let temp = this.head;
        if ( this.length === 1) {
            this.head = null;
            this.tail = null;
        } else {
            this.head = this.head.next;
            this.head.prev = null;
            temp.next = null;
        }
        this.length--;
        return temp;
    }

    get(index) {
        if ( index < 0 || index >= this.length ) return undefined;
        let temp;
        if ( index < this.length / 2 ) {
            temp = this.head;
            for ( let i = 0; i < index; i++ ) {
                temp = temp.next;
            }
        } else {
            
            temp = this.tail;
            for ( let i = this.length - 1; i > index; i-- ) {
                temp = temp.prev;
            }
        }
        return temp;
    }

    set(index, value) {
        let temp = this.get(index);
        if ( !temp ) {
            return false;
        }
        temp.value = value;
        return true;
    }

    insert(index, value) {
        if ( index === 0 ) return this.unshift(value);
        if ( index === this.length ) return this.push(value);
        if ( index < 0 || index > this.length ) return false;
        const newNode = new DLLNode(value);
        let temp = this.get(index-1);
        newNode.next = temp.next;
        newNode.prev = temp;
        temp.next = newNode;
        newNode.next.prev = newNode;
        this.length++;
        return true;
    }

    remove(index) {
        if ( index === 0 ) return this.shift();
        if (index === this.length - 1) return this.pop();
        if ( index < 0 || index >= this.length ) return undefined; 
        let tempPre = this.get(index - 1);
        let temp = tempPre.next;
        tempPre.next = temp.next;
        temp.next.prev = tempPre;
        temp.next = null;
        temp.prev = null;
        this.length--;
        return temp;

    }

    reverse() {
        
    }
}

function test() {
    let dll = new DoublyLinkedList(1);
    dll.push(10);
    dll.push(25);
    dll.push(12);
    // console.log(dll.pop());
    dll.unshift(19);
    dll.shift();
    console.log(dll.get(2));
    dll.set(1,5);
    dll.insert(1,8);
    dll.remove(1);
    // dll.reverse();
    console.log(dll);
}

test();